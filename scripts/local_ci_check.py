#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö CI –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–µ—Ä–µ–¥ push –≤ GitLab.
–ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã—Ö CI pipeline.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description, cwd=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîç {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd,
            capture_output=True,
            text=True
        )
        
        if result.stdout:
            print(result.stdout)
        
        if result.stderr:
            print("STDERR:", result.stderr)
            
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
            return True
        else:
            print(f"‚ùå {description} - –ù–ï–£–î–ê–ß–ê (–∫–æ–¥: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def check_python():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python –∫–æ–¥"""
    print("\n" + "="*60)
    print("üêç –ü–†–û–í–ï–†–ö–ê PYTHON –ö–û–î–ê")
    print("="*60)
    
    app_dir = Path(__file__).parent.parent / "app"
    
    if not app_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è app/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    success &= run_command(
        "pip install -r requirements-dev.txt",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
        cwd=app_dir
    )
    
    # Flake8 –ø—Ä–æ–≤–µ—Ä–∫–∞
    success &= run_command(
        "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics",
        "Flake8 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏",
        cwd=app_dir
    )
    
    success &= run_command(
        "flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics",
        "Flake8 - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è",
        cwd=app_dir
    )
    
    # Black –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    success &= run_command(
        "black --check --diff .",
        "Black - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        cwd=app_dir
    )
    
    # isort –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    success &= run_command(
        "isort --check-only --diff .",
        "isort - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤",
        cwd=app_dir
    )
    
    # MyPy –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    run_command(
        "mypy . --ignore-missing-imports",
        "MyPy - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        cwd=app_dir
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success &= run_command(
        "pytest tests/ -v --cov=. --cov-report=term-missing",
        "Pytest - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤",
        cwd=app_dir
    )
    
    return success

def check_flutter():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Flutter –∫–æ–¥"""
    print("\n" + "="*60)
    print("üíô –ü–†–û–í–ï–†–ö–ê FLUTTER –ö–û–î–ê")
    print("="*60)
    
    success = True
    
    # Flutter –¥–æ–∫—Ç–æ—Ä
    run_command(
        "flutter doctor -v",
        "Flutter Doctor - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    success &= run_command(
        "flutter pub get",
        "Flutter pub get - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    )
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
    success &= run_command(
        "flutter analyze --fatal-infos --fatal-warnings",
        "Flutter analyze - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    success &= run_command(
        "dart format --set-exit-if-changed .",
        "Dart format - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success &= run_command(
        "flutter test --coverage",
        "Flutter test - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    )
    
    return success

def auto_fix():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
    print("\n" + "="*60)
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("="*60)
    
    app_dir = Path(__file__).parent.parent / "app"
    
    print("\nüêç Python auto-fix:")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python
    run_command(
        "black .",
        "Black - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        cwd=app_dir
    )
    
    run_command(
        "isort .",
        "isort - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤",
        cwd=app_dir
    )
    
    print("\nüíô Flutter auto-fix:")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flutter
    run_command(
        "dart format .",
        "Dart format - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –õ–û–ö–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê CI/CD")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∏ GitLab CI")
    print("="*60)
    
    if len(sys.argv) > 1 and sys.argv[1] == "--fix":
        auto_fix()
        print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
        print("–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ --fix –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    script_dir = Path(__file__).parent
    project_root = script_dir.parent
    os.chdir(project_root)
    
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    python_success = check_python()
    flutter_success = check_flutter()
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*60)
    
    if python_success:
        print("‚úÖ Python –ø—Ä–æ–≤–µ—Ä–∫–∏: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå Python –ø—Ä–æ–≤–µ—Ä–∫–∏: –ù–ï–£–î–ê–ß–ê")
    
    if flutter_success:
        print("‚úÖ Flutter –ø—Ä–æ–≤–µ—Ä–∫–∏: –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå Flutter –ø—Ä–æ–≤–µ—Ä–∫–∏: –ù–ï–£–î–ê–ß–ê")
    
    if python_success and flutter_success:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å commit –∏ push üöÄ")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python scripts/local_ci_check.py --fix")
        print("2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã –≤—Ä—É—á–Ω—É—é")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑")
        sys.exit(1)

if __name__ == "__main__":
    main() 