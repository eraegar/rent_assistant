// Telegram WebApp Integration
class TelegramWebApp {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.isInTelegram = !!this.tg;
        this.init();
    }

    init() {
        if (!this.isInTelegram) {
            console.log('Not running in Telegram WebApp');
            return;
        }

        console.log('üöÄ Telegram WebApp initialized');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        this.setupButtons();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.handleUserData();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞
        this.handleStartParams();
    }

    setupTheme() {
        if (!this.tg) return;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        const themeParams = this.tg.themeParams;
        
        document.documentElement.style.setProperty('--tg-theme-bg-color', themeParams.bg_color || '#ffffff');
        document.documentElement.style.setProperty('--tg-theme-text-color', themeParams.text_color || '#000000');
        document.documentElement.style.setProperty('--tg-theme-hint-color', themeParams.hint_color || '#999999');
        document.documentElement.style.setProperty('--tg-theme-link-color', themeParams.link_color || '#0088cc');
        document.documentElement.style.setProperty('--tg-theme-button-color', themeParams.button_color || '#0088cc');
        document.documentElement.style.setProperty('--tg-theme-button-text-color', themeParams.button_text_color || '#ffffff');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç header bar
        this.tg.setHeaderColor(themeParams.bg_color || '#667eea');
    }

    setupButtons() {
        if (!this.tg) return;
        
        // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        this.tg.MainButton.text = "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É";
        this.tg.MainButton.color = "#0088cc";
        this.tg.MainButton.textColor = "#ffffff";
        
        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        this.tg.BackButton.onClick(() => {
            this.handleBackButton();
        });
    }

    setupEventHandlers() {
        if (!this.tg) return;
        
        // –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        this.tg.MainButton.onClick(() => {
            this.handleMainButton();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.tg.onEvent('viewportChanged', () => {
            console.log('Viewport changed:', this.tg.viewportHeight);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ haptic feedback
        this.setupHapticFeedback();
    }

    setupHapticFeedback() {
        if (!this.tg?.HapticFeedback) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –∫ –∫–Ω–æ–ø–∫–∞–º
        document.addEventListener('click', (e) => {
            if (e.target.matches('button, .btn, [role="button"]')) {
                this.tg.HapticFeedback.impactOccurred('medium');
            }
        });
    }

    handleUserData() {
        if (!this.tg?.initDataUnsafe?.user) return;
        
        const user = this.tg.initDataUnsafe.user;
        console.log('Telegram User:', user);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.telegramUser = {
            id: user.id,
            first_name: user.first_name,
            last_name: user.last_name,
            username: user.username,
            language_code: user.language_code,
            is_premium: user.is_premium
        };
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
        this.autoAuthWithTelegram();
    }

    async autoAuthWithTelegram() {
        if (!this.telegramUser) return;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω
            if (AuthManager.isAuthenticated()) {
                console.log('User already authenticated');
                return;
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram ID
            const response = await fetch('/auth/telegram-login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    telegram_id: this.telegramUser.id,
                    first_name: this.telegramUser.first_name,
                    last_name: this.telegramUser.last_name,
                    username: this.telegramUser.username
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                AuthManager.setToken(data.access_token);
                console.log('‚úÖ Auto-authenticated via Telegram');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                if (window.updateAuthUI) {
                    window.updateAuthUI();
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.telegramUser.first_name}!`);
            }
        } catch (error) {
            console.error('Telegram auth failed:', error);
        }
    }

    handleStartParams() {
        if (!this.tg?.initDataUnsafe?.start_param) return;
        
        const startParam = this.tg.initDataUnsafe.start_param;
        console.log('Start param:', startParam);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        if (startParam.startsWith('task_')) {
            const taskText = decodeURIComponent(startParam.replace('task_', ''));
            this.prefillTaskForm(taskText);
        }
    }

    handleMainButton() {
        console.log('Main button clicked');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–µ–π—Å—Ç–≤–∏–µ
        const currentSection = this.getCurrentSection();
        
        switch (currentSection) {
            case 'welcome':
                this.showNewTaskModal();
                break;
            case 'dashboard':
                this.showNewTaskModal();
                break;
            case 'analytics':
                this.exportAnalytics();
                break;
            default:
                this.showNewTaskModal();
        }
    }

    handleBackButton() {
        console.log('Back button clicked');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã
        const modals = ['authModal', 'profileModal', 'newTaskModal'];
        
        for (const modalId of modals) {
            const modal = document.getElementById(modalId);
            if (modal && !modal.classList.contains('hidden')) {
                modal.classList.add('hidden');
                this.tg.BackButton.hide();
                return;
            }
        }
        
        // –ï—Å–ª–∏ –º–æ–¥–∞–ª–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.showWelcome) {
            window.showWelcome();
        }
    }

    getCurrentSection() {
        if (!document.getElementById('welcomeSection').classList.contains('hidden')) {
            return 'welcome';
        }
        if (!document.getElementById('dashboardSection').classList.contains('hidden')) {
            return 'dashboard';
        }
        if (!document.getElementById('analyticsSection').classList.contains('hidden')) {
            return 'analytics';
        }
        return 'unknown';
    }

    showNewTaskModal() {
        if (window.showNewTaskModal) {
            window.showNewTaskModal();
            this.tg.MainButton.hide();
            this.tg.BackButton.show();
        }
    }

    prefillTaskForm(taskText) {
        const taskTitleInput = document.getElementById('taskTitle');
        if (taskTitleInput) {
            taskTitleInput.value = taskText;
            this.showNewTaskModal();
        }
    }

    showNotification(message) {
        if (this.tg?.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    showConfirm(message, callback) {
        if (this.tg?.showConfirm) {
            this.tg.showConfirm(message, callback);
        } else {
            const result = confirm(message);
            callback(result);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    updateButtons(context) {
        if (!this.tg) return;
        
        switch (context) {
            case 'welcome':
                this.tg.MainButton.text = "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É";
                this.tg.MainButton.show();
                this.tg.BackButton.hide();
                break;
                
            case 'dashboard':
                this.tg.MainButton.text = "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞";
                this.tg.MainButton.show();
                this.tg.BackButton.hide();
                break;
                
            case 'analytics':
                this.tg.MainButton.text = "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö";
                this.tg.MainButton.show();
                this.tg.BackButton.hide();
                break;
                
            case 'modal':
                this.tg.MainButton.hide();
                this.tg.BackButton.show();
                break;
                
            default:
                this.tg.MainButton.hide();
                this.tg.BackButton.hide();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram –±–æ—Ç
    sendDataToBot(data) {
        if (this.tg?.sendData) {
            this.tg.sendData(JSON.stringify(data));
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ WebApp
    close() {
        if (this.tg?.close) {
            this.tg.close();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.telegramWebApp = new TelegramWebApp();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.TelegramWebApp = TelegramWebApp; 