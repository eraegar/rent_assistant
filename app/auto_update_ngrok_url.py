#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ngrok URL –≤ –ø—Ä–æ–µ–∫—Ç–µ
–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL –æ—Ç ngrok API –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã
"""

import requests
import json
import os
import re
import time
from pathlib import Path

def get_ngrok_url():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL –æ—Ç ngrok API"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ngrok API
        response = requests.get('http://localhost:4040/api/tunnels', timeout=5)
        if response.status_code == 200:
            data = response.json()
            
            # –ò—â–µ–º HTTPS —Ç—É–Ω–Ω–µ–ª—å
            for tunnel in data.get('tunnels', []):
                if tunnel.get('proto') == 'https':
                    public_url = tunnel.get('public_url')
                    if public_url:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ngrok URL: {public_url}")
                        return public_url
            
            print("‚ùå HTTPS —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ngrok API: {e}")
        return None

def read_file_with_encoding(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª, –ø—Ä–æ–±—É—è —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'cp866', 'latin1']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                content = f.read()
            return content, encoding
        except (UnicodeDecodeError, UnicodeError):
            continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º errors='ignore'
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        return content, 'utf-8'
    except Exception as e:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

def update_env_file(new_url):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º URL"""
    env_files = [Path('.env'), Path('bots/.env')]
    
    for env_file in env_files:
        if env_file.exists():
            try:
                content, detected_encoding = read_file_with_encoding(env_file)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º WEBAPP_URL
                if 'WEBAPP_URL=' in content:
                    content = re.sub(r'WEBAPP_URL=.*', f'WEBAPP_URL={new_url}', content)
                else:
                    content += f'\nWEBAPP_URL={new_url}\n'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω {env_file} (–±—ã–ª–æ: {detected_encoding})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {env_file}: {e}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                try:
                    env_file.parent.mkdir(parents=True, exist_ok=True)
                    with open(env_file, 'w', encoding='utf-8') as f:
                        f.write(f'WEBAPP_URL={new_url}\n')
                        f.write('BOT_TOKEN=YOUR_BOT_TOKEN_HERE\n')
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {env_file}")
                except Exception as create_error:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {env_file}: {create_error}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª
            try:
                env_file.parent.mkdir(parents=True, exist_ok=True)
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.write(f'WEBAPP_URL={new_url}\n')
                    f.write('BOT_TOKEN=YOUR_BOT_TOKEN_HERE\n')
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {env_file}")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {env_file}: {e}")

def update_bot_files(new_url):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ bot —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º URL"""
    bot_files = [
        'bots/bot1_simple.py',
        'bots/bot_simple.py'
    ]
    
    old_url_pattern = r'https://[a-zA-Z0-9\-]+\.ngrok-free\.app'
    
    for file_path in bot_files:
        if os.path.exists(file_path):
            try:
                content, detected_encoding = read_file_with_encoding(file_path)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ ngrok URL –Ω–∞ –Ω–æ–≤—ã–π
                updated_content = re.sub(old_url_pattern, new_url, content)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path} (–±—ã–ª–æ: {detected_encoding})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

def update_frontend_files(new_url):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç frontend —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º URL"""
    frontend_files = [
        'frontend/api.js',
        'frontend/app.js'
    ]
    
    old_url_pattern = r'https://[a-zA-Z0-9\-]+\.ngrok-free\.app'
    
    for file_path in frontend_files:
        if os.path.exists(file_path):
            try:
                content, detected_encoding = read_file_with_encoding(file_path)
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ ngrok URL –Ω–∞ –Ω–æ–≤—ã–π
                updated_content = re.sub(old_url_pattern, new_url, content)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTF-8
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path} (–±—ã–ª–æ: {detected_encoding})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

def wait_for_ngrok(max_attempts=30, delay=2):
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ ngrok —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ngrok (–º–∞–∫—Å–∏–º—É–º {max_attempts} –ø–æ–ø—ã—Ç–æ–∫)...")
    
    for attempt in range(max_attempts):
        url = get_ngrok_url()
        if url:
            return url
        
        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}... –ñ–¥–µ–º {delay} —Å–µ–∫")
        time.sleep(delay)
    
    print("‚ùå ngrok –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ngrok URL")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ ngrok
    ngrok_url = get_ngrok_url()
    
    if not ngrok_url:
        print("üîÑ ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞...")
        ngrok_url = wait_for_ngrok()
    
    if not ngrok_url:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ngrok URL")
        return False
    
    print(f"üåê –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å URL: {ngrok_url}")
    print("-" * 40)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    try:
        update_env_file(ngrok_url)
        update_bot_files(ngrok_url)
        update_frontend_files(ngrok_url)
        
        print("-" * 40)
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        print(f"üåê –¢–µ–∫—É—â–∏–π URL: {ngrok_url}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        exit(1) 