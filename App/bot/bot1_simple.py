import os
import traceback
import html
import json
import telegram
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –ø–∞–ø–∫–∏ Backend, –≥–¥–µ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
backend_dotenv_path = os.path.join(os.path.dirname(__file__), '..', 'Backend', '.env')
if os.path.exists(backend_dotenv_path):
    load_dotenv(dotenv_path=backend_dotenv_path)
else:
    load_dotenv() # Fallback to root .env

TOKEN = os.getenv("BOT_TOKEN")

# URL-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫
PLANS_URL = "https://t.me/assist_for_rent_bot/plans"
MANAGER_URL = "https://t.me/assist_for_rent_bot/manager"
ASSISTANT_URL = "https://t.me/assist_for_rent_bot/assistant"
CLIENT_WEBAPP_URL = os.getenv("CLIENT_WEBAPP_URL", "https://rent-assistant.ru")

async def start(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é."""
    user = update.effective_user
    if not user:
        return
        
    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—å–µ—Ä–∂-–±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∞—Ä–µ–Ω–¥—É¬ª.\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ.\n\n"
        "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )

    keyboard = [
        [telegram.InlineKeyboardButton("üìÑ –¢–∞—Ä–∏—Ñ—ã", callback_data='pricing')],
        [telegram.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á", callback_data='task_examples')],
        [telegram.InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='documents')],
        [telegram.InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
    ]
    
    markup = telegram.InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=markup)

async def handle_keywords(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏."""
    if not update.message or not update.message.text:
        return
        
    user_message = update.message.text.lower()

    if '–º–µ–Ω–µ–¥–∂–µ—Ä' in user_message:
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:\n{MANAGER_URL}")

    elif '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç' in user_message:
        await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤:\n{ASSISTANT_URL}")


async def handle_callback(update: telegram.Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if not query:
        return

    await query.answer()
    user = update.effective_user
    if not user:
        return

    if query.data == 'pricing':
        await query.edit_message_text(
            text=f"–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n{PLANS_URL}",
            reply_markup=telegram.InlineKeyboardMarkup([
                [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ])
        )

    elif query.data == 'task_examples':
        examples_text = (
            "üí° <b>–ß–µ–º –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç?</b>\n\n"
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ–º! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:\n\n"
            "<b>–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞:</b>\n"
            "‚úàÔ∏è  –ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—É—Å–∫–∞\n"
            "üçΩÔ∏è  –ó–∞–∫–∞–∑–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–∞ –≤–µ—á–µ—Ä\n"
            "üéÅ  –ù–∞–π—Ç–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∫–æ–ª–ª–µ–≥–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
            "üöó  –ó–∞–ø–∏—Å–∞—Ç—å –º–∞—à–∏–Ω—É –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ\n\n"
            "<b>–ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏:</b>\n"
            "üìä  –°–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 5 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –≤ –≤–∞—à–µ–π –Ω–∏—à–µ\n"
            "üìÑ  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å–æ–≤–µ—â–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç\n"
            "üìÖ  –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏, —Å–æ–≥–ª–∞—Å–æ–≤–∞–≤ –≤—Ä–µ–º—è\n"
            "üìù  –ù–∞–π—Ç–∏ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å 10 —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
        )
        keyboard = [
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É, –≤—ã–∑—ã–≤–∞—é—â—É—é –æ—à–∏–±–∫—É
            # [telegram.InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", web_app=telegram.WebAppInfo(url=CLIENT_WEBAPP_URL))]
            [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(examples_text, reply_markup=markup, parse_mode=telegram.constants.ParseMode.HTML)


    elif query.data == 'documents':
        documents_text = (
            "üìÑ <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ú—ã —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–µ–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ (–§–ó-152) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
            "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á, –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è.\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
        keyboard = [
            [telegram.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–∞–Ω–Ω—ã—Ö", callback_data='support')],
            [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(documents_text, reply_markup=markup, parse_mode=telegram.constants.ParseMode.HTML)

    elif query.data == 'support':
        support_text = (
            "üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
            "–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!\n\n"
            "<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
            "–ü–Ω-–ü—Ç: 9:00 - 21:00 (MSK)\n\n"
            "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
            "‚Ä¢ Email: support@assistant-for-rent.com\n"
            "‚Ä¢ Telegram: @assistant_for_rent_support"
        )
        keyboard = [
            [telegram.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/assistant_for_rent_support")],
            [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
        ]
        markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(support_text, reply_markup=markup, parse_mode=telegram.constants.ParseMode.HTML)

    elif query.data == 'back_to_main':
        welcome_text = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∫–æ–Ω—Å—å–µ—Ä–∂-–±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –∞—Ä–µ–Ω–¥—É¬ª.\n\n"
            "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ.\n\n"
            "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        )
        keyboard = [
            [telegram.InlineKeyboardButton("üìÑ –¢–∞—Ä–∏—Ñ—ã", callback_data='pricing')],
            [telegram.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á", callback_data='task_examples')],
            [telegram.InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='documents')],
            [telegram.InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')]
        ]
        markup = telegram.InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(welcome_text, reply_markup=markup)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if context.error:
        print(f"ERROR in {__name__}: An error occurred")
        print(f"Update: {update}")
        print(f"Context: {context.error}")
        traceback.print_exception(type(context.error), context.error, context.error.__traceback__)
        
        DEVELOPER_CHAT_ID = os.getenv("DEVELOPER_CHAT_ID")
        if DEVELOPER_CHAT_ID:
            try:
                update_str = update.to_json() if isinstance(update, telegram.Update) else str(update)
                tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
                tb_string = "".join(tb_list)
                message = (
                    f"‚ÄºÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ\n\n"
                    f"<pre>update = {html.escape(json.dumps(json.loads(update_str), indent=2, ensure_ascii=False))}</pre>\n\n"
                    f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
                    f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
                    f"<pre>{html.escape(tb_string)}</pre>"
                )
                await context.bot.send_message(
                    chat_id=DEVELOPER_CHAT_ID, text=message, parse_mode=telegram.constants.ParseMode.HTML
                )
            except Exception as e:
                print(f"Failed to send error message to developer: {e}")
            
    if isinstance(update, telegram.Update) and update.effective_message:
        await update.effective_message.reply_text(
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def setup_bot_commands(application: Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞."""
    await application.bot.set_my_commands([
        telegram.BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    menu_button = telegram.MenuButtonDefault()
    await application.bot.set_chat_menu_button(menu_button=menu_button)
    
def main():
    if not TOKEN or TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("ÔøΩÔøΩ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather")
        return

    print("ü§ñ Starting Assistant-for-Rent Bot...")
    print(f"üîë Token: {TOKEN[:10]}...")

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_keywords))
    
    application.add_error_handler(error_handler)

    print("üöÄ Bot is running...")
    application.run_polling()

if __name__ == "__main__":
    main() 