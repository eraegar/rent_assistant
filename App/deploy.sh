#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π Telegram Assistant –Ω–∞ Ubuntu 22.04
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [domain]

set -e

DOMAIN=${1:-"rent-assistant.ru"}
USER="telegram-assistant"
PROJECT_DIR="/home/$USER/telegram-assistant"

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π Telegram Assistant..."
echo "üìç –î–æ–º–µ–Ω: $DOMAIN"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ sudo
if [[ $EUID -eq 0 ]]; then
   echo "‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç root. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å sudo."
   exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    echo "üìã $1"
}

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
print_status "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
sudo apt update && sudo apt upgrade -y

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
sudo apt install python3 python3-pip python3-venv git curl wget unzip htop nginx -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18
if ! command -v node &> /dev/null; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
if ! command -v pm2 &> /dev/null; then
    print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2..."
    sudo npm install -g pm2 serve
fi

# 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if ! id "$USER" &>/dev/null; then
    print_status "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER..."
    sudo useradd -m -s /bin/bash $USER
    sudo usermod -aG sudo $USER
fi

# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Backend..."
cd $PROJECT_DIR/Backend

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -d "venv" ]; then
    python3 -m venv venv
fi

source venv/bin/activate
pip install -r requirements.txt

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ ! -f ".env" ]; then
    cat > .env << EOF
DATABASE_URL=sqlite:///./telegram_assistant.db
SECRET_KEY=$(openssl rand -hex 32)
BOT_TOKEN=REPLACE_WITH_YOUR_BOT_TOKEN
CLIENT_WEBAPP_URL=https://$DOMAIN
MANAGER_WEBAPP_URL=https://manager.$DOMAIN
ASSISTANT_WEBAPP_URL=https://assistant.$DOMAIN
CORS_ORIGINS=["https://$DOMAIN","https://client.$DOMAIN","https://manager.$DOMAIN","https://assistant.$DOMAIN"]
EOF
    echo "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å BOT_TOKEN –≤ Backend/.env"
fi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
if [ ! -f "telegram_assistant.db" ]; then
    python init_db.py
fi

# 5. –°–±–æ—Ä–∫–∞ Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
print_status "–°–±–æ—Ä–∫–∞ Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."

# Client App
cd $PROJECT_DIR/Frontend/client-app
sed -i "s|http://127.0.0.1:8000/api/v1|https://api.$DOMAIN/api/v1|g" src/services/api.ts
npm install
npm run build

# Manager App
cd ../manager-app
sed -i "s|http://localhost:8000|https://api.$DOMAIN|g" src/stores/useManagerStore.ts
npm install
npm run build

# Assistant App
cd ../assistant-app
sed -i "s|http://localhost:8000|https://api.$DOMAIN|g" src/stores/useAssistantStore.ts
npm install
npm run build

# 6. –°–æ–∑–¥–∞–Ω–∏–µ PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PM2..."
cd $PROJECT_DIR

cat > ecosystem.config.js << EOF
module.exports = {
  apps: [
    {
      name: 'telegram-assistant-backend',
      script: 'venv/bin/python',
      args: 'main.py',
      cwd: '$PROJECT_DIR/Backend',
      env: {
        PORT: 8000,
        NODE_ENV: 'production'
      },
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: '1G'
    },
    {
      name: 'telegram-assistant-client',
      script: 'npx',
      args: 'serve -s build -l 3000',
      cwd: '$PROJECT_DIR/Frontend/client-app',
      env: { PORT: 3000 },
      instances: 1,
      autorestart: true,
      watch: false
    },
    {
      name: 'telegram-assistant-manager',
      script: 'npx',
      args: 'serve -s build -l 3001',
      cwd: '$PROJECT_DIR/Frontend/manager-app',
      env: { PORT: 3001 },
      instances: 1,
      autorestart: true,
      watch: false
    },
    {
      name: 'telegram-assistant-assistant',
      script: 'npx',
      args: 'serve -s build -l 3002',
      cwd: '$PROJECT_DIR/Frontend/assistant-app',
      env: { PORT: 3002 },
      instances: 1,
      autorestart: true,
      watch: false
    },
    {
      name: 'telegram-bot',
      script: 'venv/bin/python',
      args: 'bots/bot1_simple.py',
      cwd: '$PROJECT_DIR/TelegramBot',
      env: {
        PYTHONPATH: '$PROJECT_DIR/Backend'
      },
      instances: 1,
      autorestart: true,
      watch: false
    }
  ]
};
EOF

# 7. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
sudo mkdir -p /var/log/telegram-assistant
sudo chown $USER:$USER /var/log/telegram-assistant

# 8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Cloudflared
print_status "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Cloudflare Tunnel..."
if ! command -v cloudflared &> /dev/null; then
    wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
    sudo dpkg -i cloudflared-linux-amd64.deb
    rm cloudflared-linux-amd64.deb
fi

# 9. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—É–Ω–Ω–µ–ª—è
mkdir -p ~/.cloudflared
cat > ~/.cloudflared/config.yml << EOF
# –ó–∞–º–µ–Ω–∏—Ç–µ TUNNEL_NAME –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ç—É–Ω–Ω–µ–ª—è
tunnel: telegram-assistant-tunnel
credentials-file: /home/$USER/.cloudflared/TUNNEL_ID.json

ingress:
  # Client App (–æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
  - hostname: $DOMAIN
    service: http://localhost:3000
  - hostname: client.$DOMAIN
    service: http://localhost:3000
    
  # Manager App (—Å–∫—Ä—ã—Ç–æ–µ)
  - hostname: manager.$DOMAIN
    service: http://localhost:3001
    
  # Assistant App (—Å–∫—Ä—ã—Ç–æ–µ)
  - hostname: assistant.$DOMAIN
    service: http://localhost:3002
    
  # API Backend
  - hostname: api.$DOMAIN
    service: http://localhost:8000
    
  # Catch-all
  - service: http://localhost:3000
EOF

# 10. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
sudo ufw --force enable
sudo ufw allow ssh
sudo ufw allow 80
sudo ufw allow 443

# 11. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞
print_status "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
cat > /home/$USER/backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/home/telegram-assistant/backups"
mkdir -p $BACKUP_DIR

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
cp /home/telegram-assistant/telegram-assistant/Backend/telegram_assistant.db $BACKUP_DIR/db_backup_$DATE.db

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
find $BACKUP_DIR -name "db_backup_*.db" -mtime +7 -delete
EOF

chmod +x /home/$USER/backup.sh

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ crontab
(crontab -l 2>/dev/null; echo "0 2 * * * /home/$USER/backup.sh") | crontab -

# 12. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
print_status "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
pm2 start ecosystem.config.js
pm2 save
pm2 startup

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –û–±–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ Backend/.env"
echo "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cloudflared tunnel login"
echo "3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: cloudflared tunnel create telegram-assistant-tunnel"
echo "4. –û–±–Ω–æ–≤–∏—Ç–µ TUNNEL_ID –≤ ~/.cloudflared/config.yml"
echo "5. –°–æ–∑–¥–∞–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏:"
echo "   cloudflared tunnel route dns telegram-assistant-tunnel $DOMAIN"
echo "   cloudflared tunnel route dns telegram-assistant-tunnel client.$DOMAIN"
echo "   cloudflared tunnel route dns telegram-assistant-tunnel manager.$DOMAIN"
echo "   cloudflared tunnel route dns telegram-assistant-tunnel assistant.$DOMAIN"
echo "   cloudflared tunnel route dns telegram-assistant-tunnel api.$DOMAIN"
echo "6. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—É–Ω–Ω–µ–ª—å: sudo cloudflared service install && sudo systemctl start cloudflared"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "pm2 status          - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "pm2 logs            - –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "pm2 restart all     - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo ""
echo "üåê –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –≤–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
echo "https://$DOMAIN - –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
echo "https://manager.$DOMAIN - –ü–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
echo "https://assistant.$DOMAIN - –ü–∞–Ω–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"
echo "https://api.$DOMAIN - Backend API" 