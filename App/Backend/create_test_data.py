#!/usr/bin/env python3
"""
Script to create test data for the Assistant-for-Rent API
Run this after setting up the new database schema
"""

import sys
import os
from datetime import datetime, timedelta

# Add the app directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import models, database, auth

def create_test_data():
    """Create test users and data for all three roles"""
    
    # Create database tables
    models.Base.metadata.create_all(bind=database.engine)
    
    db = database.SessionLocal()
    
    try:
        print("üöÄ Creating test data...")
        
        # =============================================================================
        # CREATE TEST CLIENTS
        # =============================================================================
        
        print("üë§ Creating test clients...")
        
        # Client 1
        client1_user = models.User(
            phone="+7900123456",
            name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            password_hash=auth.get_password_hash("password123"),
            role=models.UserRole.client,
            telegram_username="@ivan_petrov"
        )
        db.add(client1_user)
        db.flush()
        
        client1_profile = models.ClientProfile(
            user_id=client1_user.id,
            email="ivan@example.com"
        )
        db.add(client1_profile)
        db.flush()
        
        # Client 1 subscription
        client1_subscription = models.Subscription(
            client_id=client1_profile.id,
            plan=models.SubscriptionPlan.full_8h,
            status=models.SubscriptionStatus.active,
            started_at=datetime.utcnow(),
            expires_at=datetime.utcnow() + timedelta(days=30),
            auto_renew=True
        )
        db.add(client1_subscription)
        
        # Client 2
        client2_user = models.User(
            phone="+7900654321",
            name="–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
            password_hash=auth.get_password_hash("password123"),
            role=models.UserRole.client,
            telegram_username="@maria_sidorova"
        )
        db.add(client2_user)
        db.flush()
        
        client2_profile = models.ClientProfile(
            user_id=client2_user.id,
            email="maria@example.com"
        )
        db.add(client2_profile)
        db.flush()
        
        # Client 2 subscription
        client2_subscription = models.Subscription(
            client_id=client2_profile.id,
            plan=models.SubscriptionPlan.personal_5h,
            status=models.SubscriptionStatus.active,
            started_at=datetime.utcnow(),
            expires_at=datetime.utcnow() + timedelta(days=30),
            auto_renew=True
        )
        db.add(client2_subscription)
        
        # =============================================================================
        # CREATE TEST ASSISTANTS
        # =============================================================================
        
        print("ü§ù Creating test assistants...")
        
        # Assistant 1 - Business specialist
        assistant1_user = models.User(
            phone="+7900111111",
            name="–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
            password_hash=auth.get_password_hash("assistant123"),
            role=models.UserRole.assistant,
            telegram_username="@anna_assistant"
        )
        db.add(assistant1_user)
        db.flush()
        
        assistant1_profile = models.AssistantProfile(
            user_id=assistant1_user.id,
            email="anna.assistant@example.com",
            specialization=models.AssistantSpecialization.full_access,
            status="online",
            current_active_tasks=0,
            total_tasks_completed=25,
            average_rating=4.8
        )
        db.add(assistant1_profile)
        
        # Assistant 2 - Personal only
        assistant2_user = models.User(
            phone="+7900222222",
            name="–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
            password_hash=auth.get_password_hash("assistant123"),
            role=models.UserRole.assistant,
            telegram_username="@dmitry_assistant"
        )
        db.add(assistant2_user)
        db.flush()
        
        assistant2_profile = models.AssistantProfile(
            user_id=assistant2_user.id,
            email="dmitry.assistant@example.com",
            specialization=models.AssistantSpecialization.personal_only,
            status="online",
            current_active_tasks=1,
            total_tasks_completed=15,
            average_rating=4.5
        )
        db.add(assistant2_profile)
        
        # Assistant 3 - Offline
        assistant3_user = models.User(
            phone="+7900333333",
            name="–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
            password_hash=auth.get_password_hash("assistant123"),
            role=models.UserRole.assistant,
            telegram_username="@elena_assistant"
        )
        db.add(assistant3_user)
        db.flush()
        
        assistant3_profile = models.AssistantProfile(
            user_id=assistant3_user.id,
            email="elena.assistant@example.com",
            specialization=models.AssistantSpecialization.business_only,
            status="offline",
            current_active_tasks=0,
            total_tasks_completed=30,
            average_rating=4.9
        )
        db.add(assistant3_profile)
        
        # =============================================================================
        # CREATE TEST MANAGERS
        # =============================================================================
        
        print("üëî Creating test managers...")
        
        # Manager 1
        manager1_user = models.User(
            phone="+7900999999",
            name="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            password_hash=auth.get_password_hash("manager123"),
            role=models.UserRole.manager,
            telegram_username="@alex_manager"
        )
        db.add(manager1_user)
        db.flush()
        
        manager1_profile = models.ManagerProfile(
            user_id=manager1_user.id,
            email="alex.manager@example.com",
            department="Operations"
        )
        db.add(manager1_profile)
        
        # =============================================================================
        # CREATE TEST TASKS
        # =============================================================================
        
        print("üìã Creating test tasks...")
        
        # Flush to get IDs
        db.flush()
        
        # Task 1 - Pending personal task
        task1 = models.Task(
            title="–ù–∞–π—Ç–∏ –Ω—è–Ω—é –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
            description="–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –Ω—è–Ω—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ 5 –ª–µ—Ç –Ω–∞ —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
            type=models.TaskType.personal,
            status=models.TaskStatus.pending,
            client_id=client2_profile.id,
            deadline=datetime.utcnow() + timedelta(hours=20)
        )
        db.add(task1)
        
        # Task 2 - In progress business task
        task2 = models.Task(
            title="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
            description="–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ IT-—É—Å–ª—É–≥",
            type=models.TaskType.business,
            status=models.TaskStatus.in_progress,
            client_id=client1_profile.id,
            assistant_id=assistant1_profile.id,
            deadline=datetime.utcnow() + timedelta(hours=15),
            claimed_at=datetime.utcnow() - timedelta(hours=2)
        )
        db.add(task2)
        
        # Task 3 - Completed task
        task3 = models.Task(
            title="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω",
            description="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ —Ö–æ—Ä–æ—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º",
            type=models.TaskType.personal,
            status=models.TaskStatus.completed,
            client_id=client1_profile.id,
            assistant_id=assistant2_profile.id,
            deadline=datetime.utcnow() + timedelta(hours=10),
            claimed_at=datetime.utcnow() - timedelta(hours=4),
            completed_at=datetime.utcnow() - timedelta(hours=1),
            result="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª–∏–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ '–ü—É—à–∫–∏–Ω' –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –≤ 19:00",
            completion_notes="–°—Ç–æ–ª–∏–∫ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"
        )
        db.add(task3)
        
        # Task 4 - Approved task with rating
        task4 = models.Task(
            title="–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
            description="–í—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –º–∞–º—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –±—é–¥–∂–µ—Ç –¥–æ 5000 —Ä—É–±–ª–µ–π",
            type=models.TaskType.personal,
            status=models.TaskStatus.approved,
            client_id=client2_profile.id,
            assistant_id=assistant2_profile.id,
            deadline=datetime.utcnow() - timedelta(hours=5),
            claimed_at=datetime.utcnow() - timedelta(hours=8),
            completed_at=datetime.utcnow() - timedelta(hours=3),
            approved_at=datetime.utcnow() - timedelta(hours=1),
            result="–ö—É–ø–∏–ª –∫—Ä–∞—Å–∏–≤—ã–π –Ω–∞–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏ Dior –≤ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–µ",
            completion_notes="–í—ã–±—Ä–∞–ª –Ω–∞–±–æ—Ä —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω —á–µ–∫ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è",
            client_rating=5,
            client_feedback="–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ú–∞–º–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø–æ–¥–∞—Ä–æ–∫. –°–ø–∞—Å–∏–±–æ!"
        )
        db.add(task4)
        
        # Task 5 - Overdue unclaimed task
        task5 = models.Task(
            title="–ü–æ–∏—Å–∫ –æ—Ñ–∏—Å–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã",
            description="–ù–∞–π—Ç–∏ –æ—Ñ–∏—Å–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ 50-70 –∫–≤.–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, –±—é–¥–∂–µ—Ç –¥–æ 80000 –≤ –º–µ—Å—è—Ü",
            type=models.TaskType.business,
            status=models.TaskStatus.pending,
            client_id=client1_profile.id,
            deadline=datetime.utcnow() - timedelta(hours=2),  # Overdue
            created_at=datetime.utcnow() - timedelta(hours=8)  # Created 8 hours ago
        )
        db.add(task5)
        
        # =============================================================================
        # CREATE SAMPLE MESSAGES
        # =============================================================================
        
        print("üí¨ Creating sample messages...")
        
        # Messages for task 2 (in progress)
        message1 = models.Message(
            task_id=task2.id,
            sender_id=client1_user.id,
            content="–î–æ–±–∞–≤–ª—é, —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ü–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
        )
        db.add(message1)
        
        message2 = models.Message(
            task_id=task2.id,
            sender_id=assistant1_user.id,
            content="–ü–æ–Ω—è–ª, —É—á—Ç—É —ç—Ç–æ –≤ –∞–Ω–∞–ª–∏–∑–µ. –£–∂–µ —Å–æ–±—Ä–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ 3 –∫–æ–º–ø–∞–Ω–∏—è–º, –∑–∞–≤—Ç—Ä–∞ –∑–∞–∫–æ–Ω—á—É –æ—Å—Ç–∞–ª—å–Ω—ã–µ 2"
        )
        db.add(message2)
        
        # Commit all changes
        db.commit()
        
        print("‚úÖ Test data created successfully!")
        print("\nüìä Created:")
        print("  - 2 Clients (Ivan with Full plan, Maria with Personal plan)")
        print("  - 3 Assistants (Anna & Elena - business, Dmitry - personal only)")
        print("  - 1 Manager (Alexander)")
        print("  - 5 Tasks (various statuses)")
        print("  - 2 Messages")
        
        print("\nüîë Test credentials:")
        print("  Clients:")
        print("    +7900123456 / password123 (Ivan - Full subscription)")
        print("    +7900654321 / password123 (Maria - Personal subscription)")
        print("  Assistants:")
        print("    anna.assistant@example.com / assistant123 (Business specialist)")
        print("    dmitry.assistant@example.com / assistant123 (Personal only)")
        print("    elena.assistant@example.com / assistant123 (Business, offline)")
        print("  Manager:")
        print("    alex.manager@example.com / manager123")
        
    except Exception as e:
        print(f"‚ùå Error creating test data: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    create_test_data() 