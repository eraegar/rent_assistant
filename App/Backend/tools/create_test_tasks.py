#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
"""
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import models
import database
from sqlalchemy.orm import Session
from sqlalchemy import create_engine

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'test.db')
engine = create_engine(f"sqlite:///{db_path}", connect_args={"check_same_thread": False})
SessionLocal = database.sessionmaker(autocommit=False, autoflush=False, bind=engine)

def create_test_tasks():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç—ã
        clients = db.query(models.ClientProfile).limit(5).all()
        if not clients:
            print("‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        test_tasks = [
            {
                "title": "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π",
                "description": "–ù—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—É—é –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
                "type": models.TaskType.business,
                "client_id": clients[0].id if len(clients) > 0 else 1
            },
            {
                "title": "–ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                "description": "–ù–∞–π—Ç–∏ –∏ –∫—É–ø–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –º–∞–º—ã –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –ë—é–¥–∂–µ—Ç –¥–æ 5000 —Ä—É–±–ª–µ–π. –û–Ω–∞ –ª—é–±–∏—Ç —á—Ç–µ–Ω–∏–µ –∏ —Ü–≤–µ—Ç—ã.",
                "type": models.TaskType.personal,
                "client_id": clients[1].id if len(clients) > 1 else 1
            },
            {
                "title": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
                "description": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ IT-—É—Å–ª—É–≥. –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å —Ü–µ–Ω–∞–º–∏, —É—Å–ª—É–≥–∞–º–∏ –∏ –∫–ª—é—á–µ–≤—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ —Ç–æ–ø-10 –∫–æ–º–ø–∞–Ω–∏–π.",
                "type": models.TaskType.business,
                "client_id": clients[2].id if len(clients) > 2 else 1
            },
            {
                "title": "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
                "description": "–ù–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–µ–≥–æ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞ –≤ —Ä–∞–π–æ–Ω–µ –º–µ—Ç—Ä–æ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.",
                "type": models.TaskType.personal,
                "client_id": clients[3].id if len(clients) > 3 else 1
            },
            {
                "title": "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º",
                "description": "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞—Ä—Ç–∞–ª, —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞.",
                "type": models.TaskType.business,
                "client_id": clients[0].id if len(clients) > 0 else 1
            },
            {
                "title": "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–µ–∑–¥",
                "description": "–ù–∞–π—Ç–∏ –Ω–∞–¥–µ–∂–Ω—É—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ù—É–∂–Ω–æ —É–ø–∞–∫–æ–≤–∞—Ç—å –≤–µ—â–∏ –∏ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –≤ –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ.",
                "type": models.TaskType.personal,
                "client_id": clients[1].id if len(clients) > 1 else 1
            }
        ]
        
        created_count = 0
        for task_data in test_tasks:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ —Å —Å—Ç–∞—Ç—É—Å–æ–º pending
            task = models.Task(
                title=task_data["title"],
                description=task_data["description"],
                type=task_data["type"],
                client_id=task_data["client_id"],
                status=models.TaskStatus.pending,  # –í–∞–∂–Ω–æ: pending —Å—Ç–∞—Ç—É—Å
                assistant_id=None,  # –í–∞–∂–Ω–æ: –±–µ–∑ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                deadline=datetime.utcnow() + timedelta(hours=48),  # 48 —á–∞—Å–æ–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                created_at=datetime.utcnow()
            )
            
            db.add(task)
            created_count += 1
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ!")
        
        # –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
        pending_tasks = db.query(models.Task).filter(
            models.Task.status == models.TaskStatus.pending,
            models.Task.assistant_id.is_(None)
        ).count()
        
        total_tasks = db.query(models.Task).count()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
        print(f"   - –í –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ (pending, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ): {pending_tasks}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {str(e)}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞...")
    create_test_tasks()
    print("‚úÖ –ì–æ—Ç–æ–≤–æ!") 