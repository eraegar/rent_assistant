#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å telegram_username
"""
import sys
import os
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –ø–∞–ø–∫–µ
current_dir = os.path.dirname(os.path.abspath(__file__))
app_dir = os.path.dirname(current_dir)
sys.path.append(app_dir)

def test_phone_formatting():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤")
    print("=" * 60)
    
    # Test cases –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_cases = [
        ("89991234567", "+7 (999) 123-45-67"),
        ("79991234567", "+7 (999) 123-45-67"),
        ("+79991234567", "+7 (999) 123-45-67"),
        ("9991234567", "+7 (999) 123-45-67"),
        ("999", "+7 (999"),
        ("9991234", "+7 (999) 123-4"),
        ("999123456", "+7 (999) 123-45-6"),
        ("99912345678", "+7 (999) 123-45-67"),  # –û–±—Ä–µ–∑–∫–∞ –ª–∏—à–Ω–∏—Ö —Ü–∏—Ñ—Ä
        ("", ""),
        ("abc", ""),
        ("123abc456", "+7 (123) 456"),
    ]
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤:")
    print("-" * 40)
    
    for input_phone, expected in test_cases:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å frontend
        formatted = format_phone_number(input_phone)
        status = "‚úÖ" if formatted == expected else "‚ùå"
        print(f"{status} '{input_phone}' -> '{formatted}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
    
    print("\n" + "=" * 60)

def format_phone_number(value: str) -> str:
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ frontend"""
    import re
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    numbers = re.sub(r'[^\d+]', '', value)
    
    # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if not numbers:
        return ''
    
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    clean_numbers = numbers
    if clean_numbers.startswith('8'):
        clean_numbers = '+7' + clean_numbers[1:]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –¥–æ–±–∞–≤–ª—è–µ–º +7
    if not clean_numbers.startswith('+7'):
        if clean_numbers.startswith('+'):
            clean_numbers = '+7' + clean_numbers[1:]
        else:
            clean_numbers = '+7' + clean_numbers
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ +7
    digits = clean_numbers[2:]  # —É–±–∏—Ä–∞–µ–º +7
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +7
    limited_digits = digits[:10]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä
    if len(limited_digits) == 0:
        return '+7'
    elif len(limited_digits) <= 3:
        return f'+7 ({limited_digits}'
    elif len(limited_digits) <= 6:
        return f'+7 ({limited_digits[:3]}) {limited_digits[3:]}'
    else:
        part1 = limited_digits[:3]
        part2 = limited_digits[3:6]
        part3 = limited_digits[6:8]
        part4 = limited_digits[8:10]
        
        formatted = f'+7 ({part1}) {part2}'
        if part3:
            formatted += f'-{part3}'
        if part4:
            formatted += f'-{part4}'
        
        return formatted

def test_client_registration_with_telegram():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å telegram username"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å Telegram –∞–ª–∏–∞—Å–æ–º")
    print("=" * 60)
    
    api_url = "http://127.0.0.1:8000/api/v1"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    test_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
        "phone": "+79991234567",
        "password": "password123",
        "telegram_username": "@testuser123"
    }
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        print(f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {test_data['name']}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {test_data['phone']}")
        print(f"   Telegram: {test_data['telegram_username']}")
        
        response = requests.post(
            f"{api_url}/clients/auth/register",
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            client_data = response.json()
            print(f"   ID: {client_data['id']}")
            print(f"   –ò–º—è: {client_data['name']}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {client_data['phone']}")
            print(f"   Telegram: {client_data['telegram_username']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
    
    print("\n" + "=" * 60)

def test_telegram_username_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram username"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –∞–ª–∏–∞—Å–æ–≤")
    print("=" * 60)
    
    # Test cases –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ telegram username
    test_cases = [
        ("@testuser", True),
        ("testuser", True),  # –î–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è @
        ("@test_user_123", True),
        ("@TestUser", True),
        ("@test", False),  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        ("@test_user_very_long_name_that_exceeds_limit", False),  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        ("@test-user", False),  # –î–µ—Ñ–∏—Å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
        ("@—Ç–µ—Å—Ç–æ–≤—ã–π", False),  # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        ("@test user", False),  # –ü—Ä–æ–±–µ–ª –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
        ("", False),  # –ü—É—Å—Ç–æ–π
        ("@123test", True),  # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    ]
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –∞–ª–∏–∞—Å–æ–≤:")
    print("-" * 40)
    
    for telegram_alias, expected_valid in test_cases:
        is_valid = validate_telegram_username(telegram_alias)
        status = "‚úÖ" if is_valid == expected_valid else "‚ùå"
        print(f"{status} '{telegram_alias}' -> –≤–∞–ª–∏–¥–Ω—ã–π: {is_valid} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_valid})")
    
    print("\n" + "=" * 60)

def validate_telegram_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
    import re
    
    if not username.strip():
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not username.startswith('@'):
        username = '@' + username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    telegram_regex = re.compile(r'^@[a-zA-Z0-9_]{5,32}$')
    return bool(telegram_regex.match(username))

if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    test_phone_formatting()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Telegram username
    test_telegram_username_validation()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å API
    test_client_registration_with_telegram()
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 