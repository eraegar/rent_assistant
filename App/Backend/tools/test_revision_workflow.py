#!/usr/bin/env python3
"""
Test script to verify revision workflow for assistants:
1. Client sends task for revision
2. Assistant can see task with revision_requested status
3. Assistant can complete or reject the task again
"""
import sys
import os
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –ø–∞–ø–∫–µ
current_dir = os.path.dirname(os.path.abspath(__file__))
app_dir = os.path.dirname(current_dir)
sys.path.append(app_dir)

# –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ app
os.chdir(app_dir)

from database import SessionLocal
from models import User, UserRole, ClientProfile, AssistantProfile, Task, TaskStatus, TaskType
from datetime import datetime

def test_revision_workflow():
    """Test the complete revision workflow"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    # 1. Setup test data
    db = SessionLocal()
    
    try:
        # Find or create test client
        test_client = db.query(User).filter(
            User.phone == "+7777777777",
            User.role == UserRole.client
        ).first()
        
        if not test_client:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º +7777777777")
            return
        
        # Find or create test assistant
        test_assistant = db.query(User).filter(
            User.phone == "+7888888888",
            User.role == UserRole.assistant
        ).first()
        
        if not test_assistant:
            print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º +7888888888")
            return
        
        # Create a test task in revision_requested status
        test_task = Task(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏",
            description="–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É",
            type=TaskType.personal,
            status=TaskStatus.revision_requested,
            client_id=test_client.client_profile.id,
            assistant_id=test_assistant.assistant_profile.id,
            created_at=datetime.utcnow(),
            claimed_at=datetime.utcnow(),
            completed_at=datetime.utcnow(),
            result="–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã",
            completion_notes="–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–º–µ—Ç–∫–∏",
            revision_notes="–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ"
        )
        
        db.add(test_task)
        db.commit()
        db.refresh(test_task)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å ID: {test_task.id} –≤ —Å—Ç–∞—Ç—É—Å–µ 'revision_requested'")
        
        # 2. Test assistant login
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        login_response = requests.post('http://localhost:8000/api/v1/assistants/auth/login', 
                                     json={"phone": "+7888888888", "password": "password123"})
        
        if login_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {login_response.text}")
            return
        
        assistant_token = login_response.json()['access_token']
        headers = {'Authorization': f'Bearer {assistant_token}'}
        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
        
        # 3. Test getting assigned tasks with revision_requested status
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
        tasks_response = requests.get('http://localhost:8000/api/v1/assistants/tasks/assigned', 
                                    headers=headers)
        
        if tasks_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_response.text}")
            return
        
        tasks = tasks_response.json()
        revision_tasks = [t for t in tasks if t['status'] == 'revision_requested']
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        print(f"‚úÖ –ò–∑ –Ω–∏—Ö {len(revision_tasks)} –∑–∞–¥–∞—á –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É")
        
        if not revision_tasks:
            print("‚ùå –ó–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
            
        revision_task = revision_tasks[0]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É: '{revision_task['title']}'")
        print(f"   –°—Ç–∞—Ç—É—Å: {revision_task['status']}")
        print(f"   –ó–∞–º–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ: {revision_task.get('revision_notes', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}")
        
        # 4. Test dashboard stats include revision_requested tasks
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dashboard...")
        stats_response = requests.get('http://localhost:8000/api/v1/assistants/dashboard/stats',
                                    headers=headers)
        
        if stats_response.status_code == 200:
            stats = stats_response.json()
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {stats['active_tasks']}")
            print(f"   (–¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_response.text}")
        
        # 5. Test completing revision task
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ...")
        completion_data = {
            "detailed_result": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–º–µ—á–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞",
            "completion_summary": "–í—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —É—á—Ç–µ–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
        }
        
        complete_response = requests.post(
            f'http://localhost:8000/api/v1/assistants/tasks/{revision_task["id"]}/complete',
            json=completion_data,
            headers=headers
        )
        
        if complete_response.status_code == 200:
            print("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
            result = complete_response.json()
            print(f"   –û—Ç–≤–µ—Ç: {result['message']}")
            
            # Verify task status changed to completed
            updated_tasks_response = requests.get('http://localhost:8000/api/v1/assistants/tasks/assigned', 
                                                headers=headers)
            if updated_tasks_response.status_code == 200:
                updated_tasks = updated_tasks_response.json()
                updated_task = next((t for t in updated_tasks if t['id'] == revision_task['id']), None)
                if updated_task and updated_task['status'] == 'completed':
                    print("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'completed'")
                else:
                    print(f"‚ùå –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è: {updated_task['status'] if updated_task else '–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {complete_response.text}")
        
        # 6. Test rejecting revision task (create another one for this test)
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ...")
        
        # Create another revision task for rejection test
        test_task_2 = Task(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
            description="–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º",
            type=TaskType.personal,
            status=TaskStatus.revision_requested,
            client_id=test_client.client_profile.id,
            assistant_id=test_assistant.assistant_profile.id,
            created_at=datetime.utcnow(),
            claimed_at=datetime.utcnow(),
            revision_notes="–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ"
        )
        
        db.add(test_task_2)
        db.commit()
        db.refresh(test_task_2)
        
        rejection_data = {
            "reason": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º—ã"
        }
        
        reject_response = requests.post(
            f'http://localhost:8000/api/v1/assistants/tasks/{test_task_2.id}/reject',
            json=rejection_data,
            headers=headers
        )
        
        if reject_response.status_code == 200:
            print("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            result = reject_response.json()
            print(f"   –û—Ç–≤–µ—Ç: {result['message']}")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {result['rejection_reason']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {reject_response.text}")
        
        print("\n" + "=" * 60)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ workflow –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("–ò—Ç–æ–≥–∏:")
        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'revision_requested'")
        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ")  
        print("‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_revision_workflow() 