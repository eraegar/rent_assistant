#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
"""

import sys
import os
import requests
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database import SessionLocal
import models

def get_manager_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    login_data = {
        "phone": "+79999999999",
        "password": "admin123"
    }
    
    response = requests.post("http://localhost:8000/api/v1/management/auth/login", json=login_data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {response.text}")
        return None

def test_assistant_creation_with_phone_formats():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –Ω–æ–º–µ—Ä–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    token = get_manager_token()
    if not token:
        return
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    test_cases = [
        {
            "name": "–¢–µ—Å—Ç 1: +79123456781",
            "phone_input": "+79123456781",
            "expected_db": "+79123456781",
            "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 1"
        },
        {
            "name": "–¢–µ—Å—Ç 2: 89123456782", 
            "phone_input": "89123456782",
            "expected_db": "+79123456782",
            "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 2"
        },
        {
            "name": "–¢–µ—Å—Ç 3: 79123456783",
            "phone_input": "79123456783", 
            "expected_db": "+79123456783",
            "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 3"
        },
        {
            "name": "–¢–µ—Å—Ç 4: 9123456784",
            "phone_input": "9123456784",
            "expected_db": "+79123456784", 
            "assistant_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 4"
        }
    ]
    
    db = SessionLocal()
    results = []
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"üìû {test_case['name']}")
        print(f"   –í—Ö–æ–¥–Ω–æ–π –Ω–æ–º–µ—Ä: {test_case['phone_input']}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π –≤ –ë–î: {test_case['expected_db']}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_data = {
            "name": test_case["assistant_name"],
            "phone": test_case["phone_input"],
            "email": f"test{i}@example.com",
            "password": "testpass123",
            "specialization": "personal_only",
            "telegram_username": f"test_assistant_{i}"
        }
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            response = requests.post(
                "http://localhost:8000/api/v1/management/assistants/create",
                headers=headers,
                json=assistant_data
            )
            
            if response.status_code == 200:
                result_data = response.json()
                print(f"   ‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {result_data['name']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user = db.query(models.User).filter(
                    models.User.name == test_case["assistant_name"]
                ).first()
                
                if user:
                    actual_phone = user.phone
                    expected_phone = test_case["expected_db"]
                    
                    if actual_phone == expected_phone:
                        print(f"   ‚úÖ –ù–æ–º–µ—Ä –≤ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {actual_phone}")
                        results.append({
                            "test": test_case["name"],
                            "status": "PASS",
                            "input": test_case["phone_input"], 
                            "expected": expected_phone,
                            "actual": actual_phone
                        })
                    else:
                        print(f"   ‚ùå –ù–æ–º–µ—Ä –≤ –ë–î –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_phone}, –ø–æ–ª—É—á–µ–Ω–æ {actual_phone}")
                        results.append({
                            "test": test_case["name"],
                            "status": "FAIL",
                            "input": test_case["phone_input"],
                            "expected": expected_phone, 
                            "actual": actual_phone
                        })
                else:
                    print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    results.append({
                        "test": test_case["name"],
                        "status": "FAIL",
                        "input": test_case["phone_input"],
                        "expected": test_case["expected_db"],
                        "actual": "NOT_FOUND"
                    })
                    
            else:
                error_data = response.json() if response.headers.get('content-type') == 'application/json' else response.text
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {error_data}")
                results.append({
                    "test": test_case["name"],
                    "status": "ERROR",
                    "input": test_case["phone_input"],
                    "expected": test_case["expected_db"],
                    "actual": f"API_ERROR: {error_data}"
                })
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            results.append({
                "test": test_case["name"],
                "status": "EXCEPTION",
                "input": test_case["phone_input"],
                "expected": test_case["expected_db"],
                "actual": f"EXCEPTION: {str(e)}"
            })
        
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 80)
    
    passed = sum(1 for r in results if r["status"] == "PASS")
    total = len(results)
    
    for result in results:
        status_emoji = "‚úÖ" if result["status"] == "PASS" else "‚ùå"
        print(f"{status_emoji} {result['test']}")
        print(f"   –í—Ö–æ–¥: {result['input']} ‚Üí –û–∂–∏–¥–∞–µ–º—ã–π: {result['expected']} ‚Üí –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {result['actual']}")
        print()
    
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–æ–º–µ—Ä–æ–≤.")
    
    db.close()

def cleanup_test_assistants():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤"""
    db = SessionLocal()
    
    test_names = [
        "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 1",
        "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 2", 
        "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 3",
        "–¢–µ—Å—Ç–æ–≤—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç 4"
    ]
    
    deleted_count = 0
    for name in test_names:
        user = db.query(models.User).filter(models.User.name == name).first()
        if user:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if user.assistant_profile:
                db.delete(user.assistant_profile)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.delete(user)
            deleted_count += 1
    
    db.commit()
    print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤")
    db.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...")
    print()
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleanup_test_assistants()
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_assistant_creation_with_phone_formats()
    print()
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    cleanup_test_assistants() 