from dotenv import load_dotenv
import os
import telegram
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –ø–∞–ø–∫–∏ bots –∏ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '.env'))
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ –∫–æ—Ä–Ω–µ–≤–æ–π .env –∫–∞–∫ fallback

TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")

# URL-—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
CLIENT_WEBAPP_URL = os.getenv("CLIENT_WEBAPP_URL", "https://client.yourdomain.com") # –ü—Ä–∏–º–µ—Ä
MANAGER_WEBAPP_URL = os.getenv("MANAGER_WEBAPP_URL", "https://manager.yourdomain.com") # –ü—Ä–∏–º–µ—Ä
ASSISTANT_WEBAPP_URL = os.getenv("ASSISTANT_WEBAPP_URL", "https://assistant.yourdomain.com") # –ü—Ä–∏–º–µ—Ä


async def start(update, context):
    print(f"üîç DEBUG: START command received from user {update.effective_user.first_name}")
    user = update.effective_user
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Assistant-for-Rent!\n\n"
        "üöÄ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.\n\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = [
        [
            telegram.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á", callback_data='task_examples'),
            telegram.InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='documents'),
        ],
        [
            telegram.InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
        ]
    ]
    markup = telegram.InlineKeyboardMarkup(keyboard)
    
    print(f"üîç DEBUG: Sending start message with {len(keyboard)} rows of buttons")
    await update.message.reply_text(welcome_text, reply_markup=markup)
    print(f"‚úÖ DEBUG: Start message sent successfully")

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def send_client_app_link(update, context):
    await update.message.reply_text(
        "üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=telegram.InlineKeyboardMarkup([
            [telegram.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=CLIENT_WEBAPP_URL)]
        ])
    )

async def send_manager_app_link(update, context):
    await update.message.reply_text(
        "üíº –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
        reply_markup=telegram.InlineKeyboardMarkup([
            [telegram.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞", url=MANAGER_WEBAPP_URL)]
        ])
    )

async def send_assistant_app_link(update, context):
    await update.message.reply_text(
        "üßë‚Äçüíª –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:",
        reply_markup=telegram.InlineKeyboardMarkup([
            [telegram.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", url=ASSISTANT_WEBAPP_URL)]
        ])
    )


async def handle_callback(update, context):
    print(f"üîç DEBUG: ========== CALLBACK RECEIVED ==========")
    print(f"üîç DEBUG: Update type: {type(update)}")
    print(f"üîç DEBUG: Has callback_query: {hasattr(update, 'callback_query')}")
    
    if not update.callback_query:
        print("‚ùå DEBUG: No callback_query in update!")
        return
        
    try:
        query = update.callback_query
        print(f"üîç DEBUG: Callback data: '{query.data}'")
        print(f"üîç DEBUG: User: {query.from_user.first_name}")
        print(f"üîç DEBUG: Message ID: {query.message.message_id}")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await query.answer()
        print(f"‚úÖ DEBUG: Callback answered")
        
        user = update.effective_user
        
        print(f"üîç DEBUG: Processing callback: {query.data}")

        if query.data == 'task_examples':
            print("DEBUG: Processing task_examples callback")
            examples_text = (
                "üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n\n"
                "üè† –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
                "‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É –¥—Ä—É–≥—É, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª–µ–µ—Ç\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–º–µ–π–Ω—ã–π —Ç—É—Ä –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –±—é–¥–∂–µ—Ç–µ 5000‚ÇΩ\n"
                "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –∂–µ–Ω—ã - –±—É–∫–µ—Ç –∏ –¥–æ—Å—Ç–∞–≤–∫—É\n\n"
                "üíº –ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏:\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å Zoom-–≤—Å—Ç—Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã 10 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ IT\n"
                "‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
                "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
            )
            
            keyboard = [
                [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            markup = telegram.InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(examples_text, reply_markup=markup)

        elif query.data == 'documents':
            print("DEBUG: Processing documents callback")
            documents_text = (
                "üìÑ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
                "üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
                "–ú—ã –æ–±—è–∑—É–µ–º—Å—è –∑–∞—â–∏—â–∞—Ç—å –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
                "üìã –°–æ–±–∏—Ä–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                "‚Ä¢ –ò–º—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏–π –∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (IP, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)\n\n"
                "üõ°Ô∏è –ú–µ—Ä—ã –∑–∞—â–∏—Ç—ã:\n"
                "‚Ä¢ SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ\n"
                "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º\n"
                "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–ó-152\n\n"
                "‚öñÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞:\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º\n"
                "‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–µ–π\n"
                "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É\n"
                "‚Ä¢ –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            )
            
            keyboard = [
                [telegram.InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://assistant-for-rent.com/docs/privacy.pdf")],
                [telegram.InlineKeyboardButton("üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://assistant-for-rent.com/docs/terms.pdf")],
                [telegram.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–∞–Ω–Ω—ã—Ö", callback_data='support')],
                [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            markup = telegram.InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(documents_text, reply_markup=markup)

        elif query.data == 'support':
            print("DEBUG: Processing support callback")
            support_text = (
                "üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
                "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n"
                "–ü–Ω-–ü—Ç: 9:00 - 21:00 MSK\n"
                "–°–±-–í—Å: 10:00 - 18:00 MSK\n\n"
                "üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
                "‚Ä¢ Email: support@assistant-for-rent.com\n"
                "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 999-99-99\n"
                "‚Ä¢ Telegram: @assistant-for-rent-support\n\n"
                "‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å:\n"
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!"
            )
            
            keyboard = [
                [telegram.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/assistant-for-rent-support")],
                [telegram.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')]
            ]
            markup = telegram.InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(support_text, reply_markup=markup)

        elif query.data == 'back_to_main':
            print("DEBUG: Processing back_to_main callback")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            keyboard = [
                [
                    telegram.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á", callback_data='task_examples'),
                    telegram.InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data='documents'),
                ],
                [
                    telegram.InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
                ]
            ]
            markup = telegram.InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Assistant-for-Rent!\n\n"
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            await query.edit_message_text(welcome_text, reply_markup=markup)
        else:
            print(f"DEBUG: Unknown callback data: {query.data}")
            
    except Exception as e:
        print(f"ERROR in handle_callback: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except:
            pass


async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
    user_message = update.message.text
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
    priority = "–æ–±—ã—á–Ω–∞—è"
    priority_emoji = "üìù"
    
    if "—Å—Ä–æ—á–Ω–æ" in user_message.lower() or "urgent" in user_message.lower():
        priority = "—Å—Ä–æ—á–Ω–∞—è (+100%)"
        priority_emoji = "üî•"
    elif "–±—ã—Å—Ç—Ä–æ" in user_message.lower() or "fast" in user_message.lower():
        priority = "–±—ã—Å—Ç—Ä–∞—è (+50%)"
        priority_emoji = "‚ö°"
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    response_text = (
        f"‚úÖ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
        f"üë§ **–ö–ª–∏–µ–Ω—Ç:** {user.first_name}\n"
        f"{priority_emoji} **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n_{user_message}_\n\n"
        f"üïê **–°—Ç–∞—Ç—É—Å:** –ü–µ—Ä–µ–¥–∞–Ω–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
        f"üì± **ID –∑–∞–¥–∞—á–∏:** #{hash(user_message) % 10000}\n\n"
        f"üöÄ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n"
        f"–£–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞."
    )
    
    keyboard = [
        [
            telegram.InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á", callback_data='task_examples'),
            telegram.InlineKeyboardButton("‚úçÔ∏è –ï—â—ë –∑–∞–¥–∞—á—É", callback_data='create_task')
        ],
        [telegram.InlineKeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", callback_data='pricing')]
    ]
    markup = telegram.InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(response_text, reply_markup=markup)


def main():
    print(f"üîç DEBUG: Checking TOKEN...")
    print(f"üîç DEBUG: BOT_TOKEN env var: {os.getenv('BOT_TOKEN', 'NOT_SET')[:10]}...")
    
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º:")
        print("   BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather")
        return
    
    print(f"ü§ñ Starting Assistant-for-Rent Bot...")
    print(f"üîë Token: {TOKEN[:10]}...")
    
    try:
        application = Application.builder().token(TOKEN).build()
        print(f"‚úÖ DEBUG: Application created successfully")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        start_handler = CommandHandler("start", start)
        callback_handler = CallbackQueryHandler(handle_callback)
        message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # client_app_handler = CommandHandler("client_app", send_client_app_link) # –£–±—Ä–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        manager_app_handler = CommandHandler("manager_app", send_manager_app_link)
        assistant_app_handler = CommandHandler("assistant_app", send_assistant_app_link)
        
        application.add_handler(start_handler)
        print(f"‚úÖ DEBUG: Start handler registered")
        
        application.add_handler(callback_handler)
        print(f"‚úÖ DEBUG: Callback handler registered")
        
        application.add_handler(message_handler)
        print(f"‚úÖ DEBUG: Message handler registered")

        # application.add_handler(client_app_handler) # –£–±—Ä–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # print(f"‚úÖ DEBUG: Client app handler registered")
        
        application.add_handler(manager_app_handler)
        print(f"‚úÖ DEBUG: Manager app handler registered")
        
        application.add_handler(assistant_app_handler)
        print(f"‚úÖ DEBUG: Assistant app handler registered")

        print("üöÄ Bot is running...")
        print("‚úÖ All handlers registered successfully")
        print("üîç DEBUG: Starting polling...")
        application.run_polling()
    except Exception as e:
        print(f"‚ùå Error starting bot: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main() 