import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Card,
  CardContent,
  Button,
  Grid,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Divider,
  Alert,
  Paper,
  List,
  ListItem,
  ListItemText,
  Chip,
  Stepper,
  Step,
  StepLabel,
  CircularProgress,
  Checkbox,
  FormControlLabel,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Badge,
} from '@mui/material';
import {
  Payment,
  Security,
  CheckCircle,
  CreditCard,
  ArrowBack,
  Lock,
  PhoneAndroid,
  AccountBalance,
  Wallet,
  VerifiedUser,
  Info,
  RadioButtonChecked,
  RadioButtonUnchecked,
} from '@mui/icons-material';
import { useAuthStore } from '../stores/useAuthStore';

interface PaymentMethod {
  id: string;
  name: string;
  icon: React.ReactNode;
  description: string;
  provider: string;
  isPopular?: boolean;
}

interface PlanDetails {
  id: string;
  name: string;
  price: number;
  features: string[];
  taskTypes: string[];
}

const paymentMethods: PaymentMethod[] = [
  {
    id: 'yookassa_card',
    name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
    description: 'Visa, MasterCard, –ú–ò–†',
    icon: <CreditCard />,
    provider: '–ÆKassa',
    isPopular: true,
  },
  {
    id: 'yookassa_sbp',
    name: '–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π',
    description: '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –±–∞–Ω–∫',
    icon: <PhoneAndroid />,
    provider: '–°–ë–ü',
    isPopular: true,
  },
  {
    id: 'sberbank',
    name: '–°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω',
    description: '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞',
    icon: <AccountBalance />,
    provider: '–°–±–µ—Ä–±–∞–Ω–∫',
  },
  {
    id: 'yoomoney',
    name: '–ÆMoney',
    description: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫',
    icon: <Wallet />,
    provider: '–ÆMoney',
  },
  {
    id: 'qiwi',
    name: 'QIWI –ö–æ—à–µ–ª–µ–∫',
    description: '–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ QIWI',
    icon: <PhoneAndroid />,
    provider: 'QIWI',
  },
];

const planDetails: Record<string, PlanDetails> = {
  personal_2h: {
    id: 'personal_2h',
    name: '–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (2—á/–¥–µ–Ω—å)',
    price: 15000,
    features: [
      '–î–æ 2 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏',
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ email',
      '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ'],
  },
  personal_5h: {
    id: 'personal_5h',
    name: '–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (5—á/–¥–µ–Ω—å)',
    price: 30000,
    features: [
      '–î–æ 5 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏',
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ email',
      '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ'],
  },
  personal_8h: {
    id: 'personal_8h',
    name: '–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (8—á/–¥–µ–Ω—å)',
    price: 50000,
    features: [
      '–î–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏',
      '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ email',
      '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ'],
  },
  business_2h: {
    id: 'business_2h',
    name: '–ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (2—á/–¥–µ–Ω—å)',
    price: 30000,
    features: [
      '–î–æ 2 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–ë–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    ],
    taskTypes: ['–ë–∏–∑–Ω–µ—Å'],
  },
  business_5h: {
    id: 'business_5h',
    name: '–ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (5—á/–¥–µ–Ω—å)',
    price: 60000,
    features: [
      '–î–æ 5 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–ë–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    ],
    taskTypes: ['–ë–∏–∑–Ω–µ—Å'],
  },
  business_8h: {
    id: 'business_8h',
    name: '–ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (8—á/–¥–µ–Ω—å)',
    price: 80000,
    features: [
      '–î–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–ë–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    ],
    taskTypes: ['–ë–∏–∑–Ω–µ—Å'],
  },
  full_2h: {
    id: 'full_2h',
    name: '–õ–∏—á–Ω—ã–π + –ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (2—á/–¥–µ–Ω—å)',
    price: 40000,
    features: [
      '–î–æ 2 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∏ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–î–æ—Å—Ç—É–ø –∫ API',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ', '–ë–∏–∑–Ω–µ—Å'],
  },
  full_5h: {
    id: 'full_5h',
    name: '–õ–∏—á–Ω—ã–π + –ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (5—á/–¥–µ–Ω—å)',
    price: 80000,
    features: [
      '–î–æ 5 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∏ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–î–æ—Å—Ç—É–ø –∫ API',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ', '–ë–∏–∑–Ω–µ—Å'],
  },
  full_8h: {
    id: 'full_8h',
    name: '–õ–∏—á–Ω—ã–π + –ë–∏–∑–Ω–µ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (8—á/–¥–µ–Ω—å)',
    price: 100000,
    features: [
      '–î–æ 8 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–Ω—å',
      '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏—á–Ω—ã–µ –∏ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏',
      '–ì–∞—Ä–∞–Ω—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      '–î–æ—Å—Ç—É–ø –∫ API',
    ],
    taskTypes: ['–õ–∏—á–Ω—ã–µ', '–ë–∏–∑–Ω–µ—Å'],
  },
};

const steps = ['–í—ã–±–æ—Ä –ø–ª–∞–Ω–∞', '–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'];

const PaymentScreen: React.FC = () => {
  const navigate = () => window.location.href = '/';
  const { user, activateSubscription } = useAuthStore();
  const [selectedPlan, setSelectedPlan] = useState<string>('personal_2h');
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [showSuccessDialog, setShowSuccessDialog] = useState(false);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const planFromUrl = urlParams.get('plan');
    if (planFromUrl && planDetails[planFromUrl]) {
      setSelectedPlan(planFromUrl);
    }
  }, []);

  const currentPlan = planDetails[selectedPlan];
  const priceInRubles = currentPlan.price; // –¶–µ–Ω–∞ —É–∂–µ –≤ —Ä—É–±–ª—è—Ö

  const handleProcessPayment = async () => {
    if (!agreedToTerms || !selectedPaymentMethod || !user) return;

    setIsProcessing(true);

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞...');
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
      await new Promise(resolve => setTimeout(resolve, 2000));

      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
      // - –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      // - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
      // - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–ª–±—ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      const paymentToken = `payment_${Date.now()}`;
      console.log('üí≥ –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', paymentToken);

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ AuthStore
      const success = await activateSubscription(selectedPlan, paymentToken);
      
      if (success) {
        console.log('üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã...');
        setShowSuccessDialog(true);
      } else {
        alert('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', e);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.');
    } finally {
      setIsProcessing(false);
    }
  };

  const canPay = selectedPaymentMethod && agreedToTerms && !isProcessing;

  return (
    <Box>
      <Container maxWidth="lg" sx={{ py: 4 }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box mb={4}>
          <Button
            startIcon={<ArrowBack />}
            onClick={navigate}
            sx={{ mb: 2 }}
          >
            –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º
          </Button>
          
          <Typography variant="h4" component="h1" gutterBottom fontWeight="bold">
            –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
          </Typography>
        </Box>

        <Grid container spacing={4}>
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
          <Grid item xs={12} md={8}>
            {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
            <Card sx={{ mb: 3 }}>
              <CardContent sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom fontWeight="bold">
                  –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                </Typography>
                
                <Box display="flex" alignItems="center" mb={2}>
                  <Box
                    sx={{
                      width: 48,
                      height: 48,
                      borderRadius: 2,
                      bgcolor: 'primary.main',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      mr: 2,
                    }}
                  >
                    <CheckCircle sx={{ color: 'white' }} />
                  </Box>
                  <Box>
                    <Typography variant="h6" fontWeight="bold">
                      {currentPlan.name}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü
                    </Typography>
                  </Box>
                </Box>

                <Divider sx={{ my: 2 }} />

                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</Typography>
                  <Typography fontWeight="bold" color="primary.main">
                    {priceInRubles.toLocaleString()} ‚ÇΩ
                  </Typography>
                </Box>

                <Alert severity="info" sx={{ mt: 2 }}>
                  <Typography variant="body2">
                    –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
                  </Typography>
                </Alert>
              </CardContent>
            </Card>

            {/* –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã */}
            <Card>
              <CardContent sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom fontWeight="bold">
                  –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                </Typography>
                
                <Grid container spacing={2}>
                  {paymentMethods.map((method) => (
                    <Grid item xs={12} key={method.id}>
                      <Paper
                        variant="outlined"
                        sx={{
                          p: 2,
                          cursor: 'pointer',
                          border: selectedPaymentMethod?.id === method.id ? '2px solid' : '1px solid',
                          borderColor: selectedPaymentMethod?.id === method.id ? 'primary.main' : 'divider',
                          bgcolor: selectedPaymentMethod?.id === method.id ? 'primary.50' : 'white',
                        }}
                        onClick={() => setSelectedPaymentMethod(method)}
                      >
                        <Box display="flex" alignItems="center" justifyContent="space-between">
                          <Box display="flex" alignItems="center">
                            <Box
                              sx={{
                                width: 48,
                                height: 48,
                                borderRadius: 1,
                                bgcolor: selectedPaymentMethod?.id === method.id ? 'primary.main' : 'grey.100',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                mr: 2,
                              }}
                            >
                              {React.cloneElement(method.icon as React.ReactElement, {
                                sx: { 
                                  color: selectedPaymentMethod?.id === method.id ? 'white' : 'grey.600' 
                                }
                              })}
                            </Box>
                            <Box>
                              <Box display="flex" alignItems="center" gap={1}>
                                <Typography variant="subtitle1" fontWeight="bold">
                                  {method.name}
                                </Typography>
                                {method.isPopular && (
                                  <Chip 
                                    label="–ü–æ–ø—É–ª—è—Ä–Ω–æ" 
                                    size="small" 
                                    color="warning" 
                                    sx={{ height: 20, fontSize: '0.7rem' }}
                                  />
                                )}
                              </Box>
                              <Typography variant="body2" color="text.secondary">
                                {method.description}
                              </Typography>
                              <Typography variant="caption" color="text.secondary">
                                {method.provider}
                              </Typography>
                            </Box>
                          </Box>
                          {selectedPaymentMethod?.id === method.id ? 
                            <RadioButtonChecked color="primary" /> : 
                            <RadioButtonUnchecked color="primary" />
                          }
                        </Box>
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Card>
          </Grid>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <Grid item xs={12} md={4}>
            <Card>
              <CardContent sx={{ p: 3 }}>
                <Typography variant="h6" gutterBottom fontWeight="bold">
                  –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ
                </Typography>
                
                <Box display="flex" gap={1} mb={2}>
                  {currentPlan.taskTypes.map((type) => (
                    <Chip key={type} label={type} size="small" variant="outlined" />
                  ))}
                </Box>
                
                <List dense>
                  {currentPlan.features.map((feature, index) => (
                    <ListItem key={index} sx={{ px: 0 }}>
                      <CheckCircle sx={{ fontSize: 16, color: 'success.main', mr: 1 }} />
                      <ListItemText 
                        primary={feature} 
                        primaryTypographyProps={{ variant: 'body2' }}
                      />
                    </ListItem>
                  ))}
                </List>
              </CardContent>
            </Card>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <Alert severity="info" icon={<Security />} sx={{ mt: 3 }}>
              <Typography variant="body2">
                <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π</strong><br />
                –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.
              </Typography>
              <Box display="flex" gap={1} mt={1}>
                {['SSL', 'PCI DSS', '3DS'].map((badge) => (
                  <Chip 
                    key={badge}
                    label={badge} 
                    size="small" 
                    variant="outlined" 
                    sx={{ height: 24, fontSize: '0.7rem' }}
                  />
                ))}
              </Box>
            </Alert>
          </Grid>
        </Grid>

        {/* –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ */}
        <Box mt={4}>
          <FormControlLabel
            control={
              <Checkbox
                checked={agreedToTerms}
                onChange={(e) => setAgreedToTerms(e.target.checked)}
                color="primary"
              />
            }
            label={
              <Typography variant="body2">
                –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å{' '}
                <Typography component="span" variant="body2" color="primary" sx={{ textDecoration: 'underline', cursor: 'pointer' }}>
                  —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                </Typography>
                {' '}–∏{' '}
                <Typography component="span" variant="body2" color="primary" sx={{ textDecoration: 'underline', cursor: 'pointer' }}>
                  –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                </Typography>
              </Typography>
            }
          />
        </Box>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã */}
        <Box mt={3} pb={2}>
          <Button
            variant="contained"
            size="large"
            fullWidth
            disabled={!canPay}
            onClick={handleProcessPayment}
            startIcon={isProcessing ? <CircularProgress size={20} /> : <Payment />}
            sx={{ 
              py: 2,
              bgcolor: canPay ? 'primary.main' : 'grey.300',
              '&:hover': {
                bgcolor: canPay ? 'primary.dark' : 'grey.300',
              }
            }}
          >
            {isProcessing 
              ? '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...' 
              : `–û–ø–ª–∞—Ç–∏—Ç—å ${priceInRubles.toLocaleString()} ‚ÇΩ`
            }
          </Button>
        </Box>
      </Container>

      {/* –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã */}
      <Dialog open={showSuccessDialog} onClose={() => {}} maxWidth="sm" fullWidth>
        <DialogTitle>
          <Box display="flex" alignItems="center">
            <CheckCircle sx={{ color: 'success.main', mr: 1, fontSize: 28 }} />
            –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!
          </Box>
        </DialogTitle>
        <DialogContent>
          <Typography paragraph>
            –ü–æ–¥–ø–∏—Å–∫–∞ "{currentPlan.name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.
          </Typography>
          <Alert severity="success" sx={{ mt: 2 }}>
            <Typography variant="body2">
              <strong>–ß—Ç–æ –¥–∞–ª—å—à–µ?</strong><br />
              ‚Ä¢ –í–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç<br />
              ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º<br />
              ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            </Typography>
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button 
            variant="contained" 
            onClick={() => {
              console.log('üöÄ –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è" –Ω–∞–∂–∞—Ç–∞');
              setShowSuccessDialog(false);
              window.location.href = '/';
            }}
            sx={{ bgcolor: 'primary.main' }}
          >
            –ù–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default PaymentScreen; 