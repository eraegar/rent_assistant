import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography,
  Alert,
  CircularProgress,
  styled,
  SelectChangeEvent,
} from '@mui/material';
import {
  Add,
  Business,
  Person,
  Description,
  Schedule,
} from '@mui/icons-material';
import { EnhancedPaper, GradientChip, clientGradients } from '../styles/gradients';

interface NewTaskModalProps {
  open: boolean;
  onClose: () => void;
  onSubmit: (taskData: {
    title: string;
    description: string;
    task_type: 'personal' | 'business';
    deadline_hours: number;
  }) => void;
  isLoading?: boolean;
  allowedTaskTypes?: string[];
  planType?: string;
  canChooseType?: boolean;
}

interface TaskTypeCardProps {
  selected?: boolean;
  children: React.ReactNode;
  onClick: () => void;
  sx?: any;
}

const TaskTypeCard = styled(Box)<TaskTypeCardProps>(({ theme, selected }) => ({
  padding: theme.spacing(2),
  borderRadius: 12,
  border: `2px solid ${selected ? theme.palette.primary.main : 'rgba(102, 126, 234, 0.2)'}`,
  background: selected ? 'rgba(102, 126, 234, 0.1)' : 'transparent',
  cursor: 'pointer',
  transition: 'all 0.2s ease-in-out',
  textAlign: 'center',
  '&:hover': {
    borderColor: theme.palette.primary.main,
    background: 'rgba(102, 126, 234, 0.05)',
    transform: 'translateY(-1px)',
  },
}));

const NewTaskModal: React.FC<NewTaskModalProps> = ({ 
  open, 
  onClose, 
  onSubmit, 
  isLoading,
  allowedTaskTypes = ['personal', 'business'],
  planType = 'full',
  canChooseType = true
}) => {
  // Determine default task type based on allowed types
  const getDefaultTaskType = (): 'personal' | 'business' => {
    if (allowedTaskTypes.includes('personal')) return 'personal';
    if (allowedTaskTypes.includes('business')) return 'business';
    return 'personal';
  };

  const [taskData, setTaskData] = useState({
    title: '',
    description: '',
    task_type: getDefaultTaskType(),
    deadline_hours: 24,
  });
  const [error, setError] = useState<string | null>(null);

  // Reset task type when allowed types change
  React.useEffect(() => {
    setTaskData(prev => ({
      ...prev,
      task_type: getDefaultTaskType()
    }));
  }, [allowedTaskTypes]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    if (!taskData.title.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
      return;
    }

    if (!taskData.description.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
      return;
    }

    // Check if task type is allowed
    if (!allowedTaskTypes.includes(taskData.task_type)) {
      setError(`–í–∞—à —Ç–∞—Ä–∏—Ñ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ${taskData.task_type === 'business' ? '–±–∏–∑–Ω–µ—Å' : '–ª–∏—á–Ω—ã–µ'} –∑–∞–¥–∞—á–∏`);
      return;
    }

    onSubmit(taskData);
  };

  const handleClose = () => {
    setTaskData({
      title: '',
      description: '',
      task_type: getDefaultTaskType(),
      deadline_hours: 24,
    });
    setError(null);
    onClose();
  };

  const handleTaskTypeChange = (type: 'personal' | 'business') => {
    // Only allow change if type is in allowed types and user can choose
    if (allowedTaskTypes.includes(type) && canChooseType) {
      setTaskData({ ...taskData, task_type: type });
    }
  };

  const handleDeadlineChange = (event: SelectChangeEvent<number>) => {
    setTaskData({ ...taskData, deadline_hours: event.target.value as number });
  };

  // Get plan restriction message
  const getPlanMessage = () => {
    if (planType === 'personal') {
      return 'üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏';
    } else if (planType === 'business') {
      return 'üíº –í–∞—à –±–∏–∑–Ω–µ—Å —Ç–∞—Ä–∏—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∏–∑–Ω–µ—Å –∑–∞–¥–∞—á–∏';
    }
    return '';
  };

  const planMessage = getPlanMessage();

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle sx={{ pb: 1 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <Add sx={{ color: 'primary.main' }} />
          <Typography variant="h6" fontWeight="bold">
            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
          </Typography>
        </Box>
      </DialogTitle>

      <DialogContent>
        <EnhancedPaper sx={{ p: 3, mt: 2 }}>
          <form onSubmit={handleSubmit}>
            {error && (
              <Alert severity="error" sx={{ mb: 3 }}>
                {error}
              </Alert>
            )}

            {/* Task Title */}
            <TextField
              fullWidth
              label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
              variant="outlined"
              value={taskData.title}
              onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
              sx={{ mb: 3 }}
              InputProps={{
                startAdornment: (
                  <Description sx={{ mr: 1, color: 'primary.main' }} />
                ),
              }}
            />

            {/* Task Description */}
            <TextField
              fullWidth
              label="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
              variant="outlined"
              multiline
              rows={4}
              value={taskData.description}
              onChange={(e) => setTaskData({ ...taskData, description: e.target.value })}
              placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å..."
              sx={{ mb: 3 }}
            />

            {/* Task Type Selection */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" gutterBottom fontWeight={600}>
                –¢–∏–ø –∑–∞–¥–∞—á–∏
              </Typography>
              
              {/* Plan restriction message */}
              {planMessage && (
                <Alert severity="info" sx={{ mb: 2 }}>
                  {planMessage}
                </Alert>
              )}
              
              <Box sx={{ display: 'flex', gap: 2 }}>
                <TaskTypeCard
                  selected={taskData.task_type === 'personal'}
                  onClick={() => handleTaskTypeChange('personal')}
                  sx={{ 
                    flex: 1,
                    opacity: allowedTaskTypes.includes('personal') ? 1 : 0.5,
                    cursor: allowedTaskTypes.includes('personal') && canChooseType ? 'pointer' : 'not-allowed',
                    '&:hover': allowedTaskTypes.includes('personal') && canChooseType ? {
                      borderColor: 'primary.main',
                      background: 'rgba(102, 126, 234, 0.05)',
                      transform: 'translateY(-1px)',
                    } : {}
                  }}
                >
                  <Person sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />
                  <Typography variant="h6" fontWeight="bold" gutterBottom>
                    –õ–∏—á–Ω–∞—è
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞, –ø–æ–∫—É–ø–∫–∏, –ª–∏—á–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è
                  </Typography>
                  {taskData.task_type === 'personal' && (
                    <GradientChip
                      label="–í—ã–±—Ä–∞–Ω–æ"
                      size="small"
                      color="primary"
                      sx={{ mt: 1 }}
                    />
                  )}
                  {!allowedTaskTypes.includes('personal') && (
                    <GradientChip
                      label="–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                      size="small"
                      color="default"
                      sx={{ mt: 1, opacity: 0.7 }}
                    />
                  )}
                </TaskTypeCard>

                <TaskTypeCard
                  selected={taskData.task_type === 'business'}
                  onClick={() => handleTaskTypeChange('business')}
                  sx={{ 
                    flex: 1,
                    opacity: allowedTaskTypes.includes('business') ? 1 : 0.5,
                    cursor: allowedTaskTypes.includes('business') && canChooseType ? 'pointer' : 'not-allowed',
                    '&:hover': allowedTaskTypes.includes('business') && canChooseType ? {
                      borderColor: 'primary.main',
                      background: 'rgba(102, 126, 234, 0.05)',
                      transform: 'translateY(-1px)',
                    } : {}
                  }}
                >
                  <Business sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />
                  <Typography variant="h6" fontWeight="bold" gutterBottom>
                    –ë–∏–∑–Ω–µ—Å
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, –¥–µ–ª–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã
                  </Typography>
                  {taskData.task_type === 'business' && (
                    <GradientChip
                      label="–í—ã–±—Ä–∞–Ω–æ"
                      size="small"
                      color="primary"
                      sx={{ mt: 1 }}
                    />
                  )}
                  {!allowedTaskTypes.includes('business') && (
                    <GradientChip
                      label="–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                      size="small"
                      color="default"
                      sx={{ mt: 1, opacity: 0.7 }}
                    />
                  )}
                </TaskTypeCard>
              </Box>
            </Box>

            {/* Deadline */}
            <FormControl fullWidth sx={{ mb: 3 }}>
              <InputLabel>–ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</InputLabel>
              <Select
                value={taskData.deadline_hours}
                onChange={handleDeadlineChange}
                label="–ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                startAdornment={<Schedule sx={{ mr: 1, color: 'primary.main' }} />}
              >
                <MenuItem value={2}>2 —á–∞—Å–∞</MenuItem>
                <MenuItem value={4}>4 —á–∞—Å–∞</MenuItem>
                <MenuItem value={8}>8 —á–∞—Å–æ–≤</MenuItem>
                <MenuItem value={24}>24 —á–∞—Å–∞</MenuItem>
                <MenuItem value={48}>2 –¥–Ω—è</MenuItem>
                <MenuItem value={72}>3 –¥–Ω—è</MenuItem>
              </Select>
            </FormControl>

            {/* Task Type Info */}
            <Box sx={{ 
              p: 2, 
              background: taskData.task_type === 'business' 
                ? 'rgba(102, 126, 234, 0.1)' 
                : 'rgba(76, 175, 80, 0.1)',
              borderRadius: 2,
              mb: 2
            }}>
              <Typography variant="body2" color="text.secondary">
                {taskData.task_type === 'business' 
                  ? 'üíº –ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –¥–µ–ª–æ–≤–æ–π —Å—Ñ–µ—Ä–µ'
                  : 'üè† –õ–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–º–∏—Å—è –Ω–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏—è—Ö'
                }
              </Typography>
            </Box>
          </form>
        </EnhancedPaper>
      </DialogContent>

      <DialogActions sx={{ p: 3 }}>
        <Button 
          onClick={handleClose}
          variant="outlined"
          disabled={isLoading}
        >
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          onClick={handleSubmit}
          variant="contained"
          disabled={isLoading || !taskData.title.trim() || !taskData.description.trim()}
          startIcon={isLoading ? <CircularProgress size={20} /> : <Add />}
          sx={{
            background: clientGradients.primary,
            '&:hover': {
              background: clientGradients.primary,
              transform: 'translateY(-1px)',
              boxShadow: '0 6px 20px rgba(102, 126, 234, 0.3)',
            }
          }}
        >
          {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default NewTaskModal; 