stages:
  - lint
  - build
  - test
  - report
  - deploy

# Global variables
variables:
  NODE_VERSION: "18"
  CACHE_FALLBACK_KEY: "fallback"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache configuration for dependencies
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/
  policy: pull-push

# ==================== LINT STAGE ====================

eslint:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx eslint . --ext .js,.jsx,.ts,.tsx --format junit --output-file eslint-report.xml
    - npx eslint . --ext .js,.jsx,.ts,.tsx --format html --output-file eslint-report.html
  artifacts:
    reports:
      junit: eslint-report.xml
    paths:
      - eslint-report.html
      - eslint-report.xml
    expire_in: 1 week
    when: always
  allow_failure: false

prettier:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx prettier --check . --write false
  allow_failure: false

stylelint:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx stylelint "**/*.css" "**/*.scss" --formatter junit --output-file stylelint-report.xml
    - npx stylelint "**/*.css" "**/*.scss" --formatter json --output-file stylelint-report.json
  artifacts:
    reports:
      junit: stylelint-report.xml
    paths:
      - stylelint-report.json
      - stylelint-report.xml
    expire_in: 1 week
    when: always

htmlhint:
  stage: lint
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - npx htmlhint "**/*.html" --format junit > htmlhint-report.xml
  artifacts:
    reports:
      junit: htmlhint-report.xml
    paths:
      - htmlhint-report.xml
    expire_in: 1 week
    when: always

# ==================== BUILD STAGE ====================

build:dependencies:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - npm ci --cache .npm --prefer-offline
    - npm audit --audit-level=high
  cache:
    policy: push
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour

build:application:
  stage: build
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build:dependencies
  script:
    - npm run build
    - npm run build:prod
  artifacts:
    paths:
      - dist/
      - build/
    expire_in: 1 day

build:docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build:application
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

# ==================== TEST STAGE ====================

test:unit:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build:dependencies
  script:
    - npm run test:unit -- --coverage --watchAll=false --reporters=default --reporters=jest-junit
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
      - junit.xml
    expire_in: 1 week
    when: always

test:integration:
  stage: test
  image: node:${NODE_VERSION}-alpine
  services:
    - postgres:13-alpine
    - redis:6-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    DATABASE_URL: postgresql://test_user:test_password@postgres:5432/test_db
    REDIS_URL: redis://redis:6379
  dependencies:
    - build:dependencies
  script:
    - npm run test:integration -- --watchAll=false --reporters=jest-junit
  artifacts:
    reports:
      junit: junit-integration.xml
    paths:
      - junit-integration.xml
    expire_in: 1 week
    when: always

test:e2e:
  stage: test
  image: cypress/browsers:node18.12.0-chrome107
  dependencies:
    - build:dependencies
    - build:application
  script:
    - npm run start:test &
    - sleep 30
    - npx cypress run --reporter junit --reporter-options mochaFile=cypress-results.xml
  artifacts:
    reports:
      junit: cypress-results.xml
    paths:
      - cypress/screenshots/
      - cypress/videos/
      - cypress-results.xml
    expire_in: 1 week
    when: always

test:security:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build:dependencies
  script:
    - npm audit --json > security-audit.json
    - npx audit-ci --config audit-ci.json
  artifacts:
    paths:
      - security-audit.json
    expire_in: 1 week
    when: always
  allow_failure: true

# ==================== REPORT STAGE ====================

report:coverage:
  stage: report
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - test:unit
  script:
    - npx nyc report --reporter=html --reporter=text-summary
    - npx nyc report --reporter=lcov
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    paths:
      - coverage/
    expire_in: 1 month
  when: always

report:quality:
  stage: report
  image: sonarsource/sonar-scanner-cli:latest
  dependencies:
    - test:unit
    - eslint
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN
  only:
    - main
    - develop

report:merge:
  stage: report
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - eslint
    - test:unit
    - test:integration
    - test:e2e
  script:
    - npx junit-merge -d ./ -o merged-results.xml
    - node scripts/generate-report.js
  artifacts:
    reports:
      junit: merged-results.xml
    paths:
      - reports/
      - merged-results.xml
    expire_in: 1 month
  when: always

# ==================== DEPLOY STAGE ====================

deploy:staging:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build:docker
  script:
    - docker run -d --name staging-app -p 8080:80 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - sleep 10
    - curl -f http://localhost:8080/health || exit 1
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - develop

deploy:production:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build:docker
  script:
    - docker run -d --name production-app -p 80:80 $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  environment:
    name: production
    url: https://example.com
  when: manual
  only:
    - main