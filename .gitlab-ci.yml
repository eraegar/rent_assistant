stages:
  - test
  - build
  - quality
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  POSTGRES_DB: telegram_assistant_test
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password

# --- TEST STAGE ---
test:backend:
  stage: test
  image: python:3.11
  services:
    - postgres:13
  variables:
    DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
  before_script:
    - cd App/Backend
    - pip install -r requirements.txt pytest pytest-cov pytest-asyncio
  script:
    - python -m pytest tests/ -v --cov=app --cov-report=xml
    - python -m pytest tests/quality/ -v
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      cobertura: App/Backend/coverage.xml
    paths:
      - App/Backend/coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

# Объединенный фронтенд-тест для всех приложений
test:frontend:
  stage: test
  image: node:18
  parallel:
    matrix:
      - APP_DIR: ["client-app", "manager-app", "assistant-app"]
  before_script:
    - cd App/Frontend/${APP_DIR}
    - npm ci
  script:
    - npm run test -- --coverage --watchAll=false
    - npm run lint
  artifacts:
    reports:
      junit: App/Frontend/${APP_DIR}/junit.xml
      cobertura: App/Frontend/${APP_DIR}/coverage/cobertura-coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

# --- STATIC ANALYSIS ---
static_analysis:python:
  stage: test
  image: python:3.11
  before_script:
    - cd App/Backend
    - pip install black flake8 mypy bandit safety
  script:
    - black --check --diff .
    - flake8 .
    - mypy app/
    - bandit -r app/ -ll
    - safety check --full-report
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

static_analysis:javascript:
  stage: test
  image: node:18
  before_script:
    - cd App/Frontend/client-app
    - npm ci
  script:
    - npm run lint
    - npm run type-check
    - npm audit --audit-level moderate
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# --- BUILD STAGE ---
build:backend:
  stage: build
  image: python:3.11
  before_script:
    - cd App/Backend
    - pip install -r requirements.txt
  script:
    - python -m compileall app/
    - echo "Backend build successful"
  artifacts:
    paths:
      - App/Backend/
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

build:frontend:
  stage: build
  image: node:18
  parallel:
    matrix:
      - APP_DIR: ["client-app", "manager-app", "assistant-app"]
  script:
    - cd App/Frontend/${APP_DIR}
    - npm ci
    - npm run build
  artifacts:
    paths:
      - App/Frontend/${APP_DIR}/build/
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

# --- QUALITY STAGE ---
test:e2e:
  stage: quality
  image: cypress/included:12.17.0
  services:
    - name: postgres:13
      alias: postgres
    - name: python:3.11
      alias: backend
    - name: node:18
      alias: frontend
  variables:
    CYPRESS_baseUrl: http://frontend:3000
    BACKEND_URL: http://backend:8000
    DATABASE_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB
  before_script:
    - cd App/Backend
    - pip install -r requirements.txt
    - python init_db.py
    - uvicorn main:app --host 0.0.0.0 --port 8000 &
    - cd ../Frontend/client-app
    - npm ci
    - npm start &
    - npx wait-on -t 30000 $BACKEND_URL $CYPRESS_baseUrl
  script:
    - npx cypress run
  artifacts:
    when: always
    paths:
      - App/Frontend/client-app/cypress/videos/
      - App/Frontend/client-app/cypress/screenshots/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'develop'

# --- DEPLOY STAGE ---
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $PRODUCTION_SERVER >> ~/.ssh/known_hosts
  script:
    - rsync -avz --delete App/ root@$PRODUCTION_SERVER:/root/project/App
    - ssh root@$PRODUCTION_SERVER "cd /root/project/App && ./deploy.sh"
  environment:
    name: production
    url: https://rent-assistant.ru
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $STAGING_SERVER >> ~/.ssh/known_hosts
  script:
    - rsync -avz --delete App/ root@$STAGING_SERVER:/root/project/App
    - ssh root@$STAGING_SERVER "cd /root/project/App && ./deploy.sh"
  environment:
    name: staging
    url: https://staging.rent-assistant.ru
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: manual

# --- POST OPERATIONS ---
cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Cleaning up temporary files..."
  when: always